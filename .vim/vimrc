" ---------------------------
" Simple Configs
" ---------------------------
set number
set relativenumber

if has('nvim')
    hi Normal guibg=NONE ctermbg=NONE
    au ColorScheme * hi Normal ctermbg=none guibg=none
    au ColorScheme myspecialcolors hi Normal ctermbg=red guibg=red

    set tabstop=4 shiftwidth=4 expandtab

    set splitbelow
    set splitright

    " CtrlP Configs
    let g:ctrlp_map = '<c-p>'
    let g:ctrlp_cmd = 'CtrlP'
    let g:ctrlp_custom_ignore = '\v(\.cache)$'
    let g:ctrlp_user_command =  ['.git', 'cd %s && git ls-files . -co --exclude-standard']

    " Color Scheme
    let g:airline_powerline_fonts = 1
    let g:airline_theme = 'powerlineish'

    colorscheme Tomorrow-Night

    " VimWiki Configs
    let g:vimwiki_list = [{'path': '~/vimwiki/',
                          \ 'syntax': 'markdown', 'ext': '.md'}]
    set nocompatible
    filetype plugin on
    syntax on

    " Autocomplete Configs
    let g:deoplete#enable_at_startup = 1

    " Autopairs Configs
    let g:closetag_filenames = '*.html,*.xhtml,*.xml,*.vue,*.phtml,*.js,*.jsx,*.coffee,*.erb'

    " Snippets Configs
    let g:UltiSnipsExpandTrigger = "<tab>"
    let g:UltiSnipsJumpForwardTrigger = "<tab>"
    let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
    
    " Test Kotlin Development
    let g:android_sdk_path = expand("$ANDROID_HOME")
    let g:gradle_loclist_show = 0
    let g:gradle_show_signs = 0 
endif

" ---------------------------
" Plugins
" ---------------------------
if has('nvim')
    call plug#begin()

    " Core
    Plug 'ctrlpvim/ctrlp.vim'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'christoomey/vim-system-copy'

    " QOL
    Plug 'psliwka/vim-smoothie'

    " File Navigation
    Plug 'preservim/nerdtree'

    " Kotlin
    Plug 'udalov/kotlin-vim'

    " Github
    Plug 'tpope/vim-fugitive'
    Plug 'Xuyuanp/nerdtree-git-plugin'

    " Github copilot
    Plug 'github/copilot.vim'

    " Test Kotlin Development
    Plug 'hsanson/vim-android'
    Plug 'dense-analysis/ale'
    Plug 'georgewfraser/java-language-server'
    Plug 'fwcd/kotlin-language-server'
 
    " Autocomplete
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }

    " Autocomplete (deoplete plugins)
    Plug 'deoplete-plugins/deoplete-zsh'
    Plug 'mhartington/nvim-typescript'
    Plug 'Shougo/neco-vim'
    Plug 'deoplete-plugins/deoplete-jedi'
    Plug 'carlitux/deoplete-ternjs'

    " Autopairs
    Plug 'alvan/vim-closetag'"
    Plug 'jiangmiao/auto-pairs'

    "Surround
    Plug 'tpope/vim-surround'

    " VimWiki
    Plug 'vimwiki/vimwiki'
    Plug 'fitzterra/vimwiki-git' 

    " Syntax
    Plug 'gisphm/vim-gitignore'

    " Snippets
    Plug 'SirVer/ultisnips'
    Plug 'honza/vim-snippets'

    " Tmux
    Plug 'christoomey/vim-tmux-navigator'
    Plug 'preservim/vimux'

    " Needed for other plugins
    Plug 'roxma/vim-hug-neovim-rpc'
    Plug 'roxma/nvim-yarp', { 'do': 'pip install -r requirements.txt' }
    call plug#end()
endif

" ---------------------------
" Shortcuts
" ---------------------------

" Disable arrow keys
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

" Tabs Movement
nnoremap K :tabn<CR>
nnoremap J :tabN<CR>
nnoremap <C-t> :tabnew<CR>
nnoremap <C-w> :tabc<CR>

" Split Movement
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Fugitive/Mergetool
nnoremap gdh :diffget //2<CR>
nnoremap gdl :diffget //3<CR>

" NERDTree
nnoremap <leader>n :NERDTreeToggle<CR>

" Vimrc
map <leader>vm :tabnew $MYVIMRC<CR>
map <leader>sv :source $MYVIMRC<CR>

" Terminal Related
map <Leader>vp :VimuxPromptCommand<CR>
map <Leader>vl :VimuxRunLastCommand<CR>

" Maximize Split
nnoremap <leader><Space> :call MaximizeToggle()<CR>

" Copy to clipboard
vnoremap <C-c> "+y

" Deoplete
function! s:check_back_space() abort "{{{
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ deoplete#manual_complete()

" Scripts
nnoremap <leader>r :!%:p

function! MaximizeToggle()
  if exists("s:maximize_session")
    exec "source " . s:maximize_session
    call delete(s:maximize_session)
    unlet s:maximize_session
    let &hidden=s:maximize_hidden_save
    unlet s:maximize_hidden_save
  else
    let s:maximize_hidden_save = &hidden
    let s:maximize_session = tempname()
    set hidden
    exec "mksession! " . s:maximize_session
    only
  endif
endfunction
